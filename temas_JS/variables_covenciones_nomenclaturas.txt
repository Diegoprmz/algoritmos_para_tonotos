Ahora, ya comenzando un poco con lo importante de JS: 

Variables: 

Al igual que en todos los lenguajes de programación, en JavaScript, las variables son contenedores que almacenan datos en memoria, igualmente se tienen accesos aleatorios en RAM pero aquí a diferencia de lenguaje C no los vamos a poder utilizar de la misma manera y es que la verdad, tampoco importa tanto. 

Para declarar variables en JS se utilizan 3 palabras clave:

- var: "var" es una palabra clave que se utiliza para declarar variables en JavaScript. Esta palabra clave se utiliza para declarar variables que pueden ser reasignadas y pueden ser declaradas o utilizadas en cualquier parte del código. Esto significa que las variables declaradas con "var" tienen un alcance global o local, dependiendo de dónde se declaran. Pero esto también nos puede traer problemas durante la encriptación o la ejecución del programa, además de ser confuso a la hora de leer el propio código, no se recomienda su uso hoy en día.

- let: Esta es la forma más común de declarar variables en JS por que tiene un alcance local dentro de las llaves donde fue delcarada y a los hijos dentro ellas. Puede cambiar su valor a lo largo de la ejecución del programa y puede ser manipulada.

- const: Esta es la forma de declarar constantes en JS. Estas variables no pueden ser modificadas dentro de la ejecución del programa pero si podemos utilizar sus valores de manera libre. 

let y const son variables de alcance local así que son más precisas de utilizar y son las más recomendadas.



Convenciones: 

Dentro de JS hay muhcas convenciones que se toman como normas no escritas para escribir código limpio y legible. Esto facilita la lectura y revisión de tu código para otros programadores y para ti mismo. Algunas de las convenciones más populares (además de las de las variables) son las nomenclatruas de las funciones, las variables, los nombres de los archivos, etc.

Se darán cuenta que el repositorio tiene varias cosas raras entre archivos que fueron modificadas por mi con el propósito de que su primer ejercicio sea que cada quién tenga que hacer un pequeño cambio en el repo para que se ajuste a las convenciones que les explicaré a continuación. 

Nomenclaturas:

La nomenclaturas son las formas de nombrar las cosas en el código, esto incluye nombres de variables, funciones, archivos, etc. exiten 3 principales para JS las cuales son camelCase, snake_case y SCREAMING_CASE.

Los nombres ya les dicen cómo funcionan.

La camelCase pues funciona justamente como el nombre lo dice, es decir, se escribe la primera letra de cada palabra en mayúsculas, por ejemplo: 
- `miVariable` 
- `miFuncion`
- `miArchivo`
- `miObjeto`
- `miArray`

snake_case: funciona de la misma manera que la camelCase pero en minúsculas y separando las palabras con guiones bajos, por ejemplo:
- `mi_variable`   
- `mi_funcion`
- `mi_archivo`
- `mi_objeto`
- `mi_array`

SCREAMING_CASE: de toas, es la menos utilizada por que estéticamente la verdad es que queda feo y es algo castroso estar cambiando el teclado a mayus cada que quieres declarar algo. Estas son utilizadas principalmente para nombrar constantes que son muy fundamenteales, por ejemplo: 
- `const PI``
- `const E``
- `const ID_USUARIO_GAY`
- `const ID_USUARIO_HETERO`
- `const ID_USUARIO_BI`


Mi forma de trabajar es: 

Para nombrar archivos o carpetas utilizo snake_case. Esto le da mucha legibilidad a archivos modulares o módulos enteros por la división de las palabras por guiones. 

Para nombrar variables o funciones utilizo camelCase. Esto me permite escribir nombres de variables de manera más rápida y legible.

Por último, para nombrar constantes utilizo SCREAMING_CASE. Esto me permite identificar las cosas que de verdad son importantes para el programa y saber qué puedo modificar, qué no y qué debo de sacar un MAP, un REDUCE o un FILTER. (Más adelante les explico qué es eso) 


Al terminar de esta lección, les recomiendo que revisen el repositorio y que hagan los cambios. Al hacer los cambios ejecuten el comando `git commit -am "Su_aportación"` y luego enter. Luego ejecuten el comando `git push` para que se reflejen los cambios en el repositorio y yo pueda revisarlos.
